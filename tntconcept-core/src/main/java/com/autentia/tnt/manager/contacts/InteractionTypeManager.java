/**
 * TNTConcept Easy Enterprise Management by Autentia Real Bussiness Solution S.L.
 * Copyright (C) 2007 Autentia Real Bussiness Solution S.L.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

package com.autentia.tnt.manager.contacts;

import java.util.List;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

import com.autentia.tnt.businessobject.InteractionType;
import com.autentia.tnt.dao.SortCriteria;
import com.autentia.tnt.dao.hibernate.InteractionTypeDAO;
import com.autentia.tnt.dao.search.InteractionTypeSearch;
import com.autentia.tnt.util.SpringUtils;



public class InteractionTypeManager {

/* InteractionType - generated by stajanov (do not edit/delete) */



  /** Logger */
  private static final Log log = LogFactory.getLog(InteractionTypeManager.class);

  /** InteractionType DAO **/
  private InteractionTypeDAO interactionTypeDAO;

  /**
   * Get default InteractionTypeManager as defined in Spring's configuration file.
   * @return the default singleton InteractionTypeManager
   */
  public static InteractionTypeManager getDefault()
  {
    return (InteractionTypeManager)SpringUtils.getSpringBean("managerInteractionType");
  }

  /** 
   * Empty constructor needed by CGLIB (Spring AOP)
   */
  protected InteractionTypeManager()
  {
  }
	
  /** 
   * Default constructor 
   * @deprecated do not construct managers alone: use Spring's declared beans
   */
  public InteractionTypeManager( InteractionTypeDAO interactionTypeDAO )
  {
    this.interactionTypeDAO = interactionTypeDAO;
  }

  /**
   * List interactionTypes. 
   * @param search search filter to apply
   * @param sort sorting criteria
   * @return the list of all interactionTypes sorted by requested criterion
   */
  public List<InteractionType> getAllEntities(InteractionTypeSearch search, SortCriteria sort){
    return interactionTypeDAO.search( search, sort );
  }
  
  /**
   * Get interactionType by primary key.
   * @return interactionType selected by id.
   */
  public InteractionType getEntityById(int id){
    return interactionTypeDAO.getById(id);	    
  }
	
  /**
   * Insert interactionType. 
   */
  public void insertEntity(InteractionType interactionType) {
    interactionTypeDAO.insert(interactionType);
  }
	 
  /**
   * Update interactionType. 
   */
  public void updateEntity(InteractionType interactionType) {
    interactionTypeDAO.update(interactionType);
  }

  /**
   * Delete interactionType. 
   */
  public void deleteEntity(InteractionType interactionType) {
    interactionTypeDAO.delete(interactionType);
  }

/* InteractionType - generated by stajanov (do not edit/delete) */

	
}
