#*
 * TNTConcept Easy Enterprise Management by Autentia Real Bussiness Solution S.L.
 * Copyright (C) 2007 Autentia Real Bussiness Solution S.L.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *#

##
## INITIALIZATION: global variables
##
$_stajanov.info("manager.vm - begin")
#set( $elw = $tools.uncapitalizeFirst( $entity ) )
#set( $abcField = $tools.capitalizeFirst( $desc-props.getProperty( "abcField" ) ) )


##
## JAVA CLASS
##
  /** Logger */
  private static final Log log = LogFactory.getLog(${entity}Manager.class);

  /** ${entity} DAO **/
  private ${entity}DAO ${elw}DAO;

  /**
   * Get default ${entity}Manager as defined in Spring's configuration file.
   * @return the default singleton ${entity}Manager
   */
  public static ${entity}Manager getDefault()
  {
    return (${entity}Manager)SpringUtils.getSpringBean("manager${entity}");
  }

  /** 
   * Empty constructor needed by CGLIB (Spring AOP)
   */
  protected ${entity}Manager()
  {
  }
	
  /** 
   * Default constructor 
   * @deprecated do not construct managers alone: use Spring's declared beans
   */
  public ${entity}Manager( ${entity}DAO ${elw}DAO )
  {
    this.${elw}DAO = ${elw}DAO;
  }

  /**
   * List ${elw}s. 
   * @param search search filter to apply
   * @param sort sorting criteria
   * @return the list of all ${elw}s sorted by requested criterion
   */
  public List<${entity}> getAllEntities(${entity}Search search, SortCriteria sort){
    return ${elw}DAO.search( search, sort );
  }
  
  /**
   * Get ${elw} by primary key.
   * @return ${elw} selected by id.
   */
  public ${entity} getEntityById(int id){
    return ${elw}DAO.getById(id);	    
  }
	
  /**
   * Insert ${elw}. 
   */
  public void insertEntity(${entity} ${elw}) {
    ${elw}DAO.insert(${elw});
  }
	 
  /**
   * Update ${elw}. 
   */
  public void updateEntity(${entity} ${elw}) {
    ${elw}DAO.update(${elw});
  }

  /**
   * Delete ${elw}. 
   */
  public void deleteEntity(${entity} ${elw}) {
    ${elw}DAO.delete(${elw});
  }
