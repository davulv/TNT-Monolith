/**
 * TNTConcept Easy Enterprise Management by Autentia Real Bussiness Solution S.L.
 * Copyright (C) 2007 Autentia Real Bussiness Solution S.L.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

package com.autentia.tnt.dao.hibernate;

import java.util.List;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;


import com.autentia.tnt.businessobject.InteractionType;
import com.autentia.tnt.businessobject.OrganizationType;
import com.autentia.tnt.dao.DataAccException;
import com.autentia.tnt.dao.IDataAccessObject;
import com.autentia.tnt.dao.SearchCriteria;
import com.autentia.tnt.dao.SortCriteria;
import com.autentia.tnt.util.SpringUtils;



public class OrganizationTypeDAO extends HibernateManagerBase<OrganizationType> 
{



/* OrganizationType - generated by stajanov (do not edit/delete) */



  /** Logger */
  private static final Log log = LogFactory.getLog(OrganizationTypeDAO.class);

  /**
   * Get default OrganizationTypeDAO as defined in Spring's configuration file.
   * @return the default singleton OrganizationTypeDAO
   */
  public static OrganizationTypeDAO getDefault()
  {
    return (OrganizationTypeDAO)SpringUtils.getSpringBean("daoOrganizationType");
  }

 /** 
   * Constructor
   * @deprecated do not construct DAOs alone: use Spring's declared beans
   */
  public OrganizationTypeDAO(){
    super(false);
  }

  /** 
   * Retrieve a OrganizationType object from database given its id
   * @param id primary key of OrganizationType object
   * @return the OrganizationType object identified by the id
   * @throws DataAccException on error
   */
  public OrganizationType getById( int id ) throws DataAccException {
    return super.getByPk(OrganizationType.class,id);
  }

  /** 
   * Get all OrganizationType objects from database sorted by the given criteria
   * @param crit the sorting criteria
   * @return a list with all existing OrganizationType objects
   * @throws DataAccException on error
   */
  public List<OrganizationType> search( SortCriteria crit ) throws DataAccException {
    return super.list(OrganizationType.class,crit);
  }

  /** 
   * Get specified OrganizationType objects from database sorted by the given criteria
   * @param search search criteria
   * @param sort the sorting criteria
   * @return a list with OrganizationType objects matching the search criteria
   * @throws DataAccException on error
   */
  public List<OrganizationType> search(SearchCriteria search, SortCriteria sort) throws DataAccException {
    return super.search(OrganizationType.class,search,sort);
  }

  /** 
   * Insert a new OrganizationType object in database
   * @param dao the OrganizationType object to insert
   * @throws DataAccException on error
   */
  public void insert(OrganizationType dao) throws DataAccException {
    super.insert(dao);
  }

  /** 
   * Update an existing OrganizationType object in database
   * @param dao the OrganizationType object to update
   * @throws DataAccException on error
   */
  public void update(OrganizationType dao) throws DataAccException {
    super.update(dao,dao.getId());
  }

  /** 
   * Delete an existing OrganizationType object in database
   * @param dao the OrganizationType object to update
   * @throws DataAccException on error
   */
  public void delete(OrganizationType dao) throws DataAccException {
    super.delete(dao,dao.getId());
  }

/* OrganizationType - generated by stajanov (do not edit/delete) */

  
}
