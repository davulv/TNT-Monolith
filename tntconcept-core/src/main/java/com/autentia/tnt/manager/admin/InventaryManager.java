/**
 * TNTConcept Easy Enterprise Management by Autentia Real Bussiness Solution S.L.
 * Copyright (C) 2007 Autentia Real Bussiness Solution S.L.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

package com.autentia.tnt.manager.admin;

import java.util.List;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

import com.autentia.tnt.businessobject.Inventary;
import com.autentia.tnt.businessobject.User;
import com.autentia.tnt.dao.SortCriteria;
import com.autentia.tnt.dao.hibernate.InventaryDAO;
import com.autentia.tnt.dao.hibernate.UserDAO;
import com.autentia.tnt.dao.search.InventarySearch;
import com.autentia.tnt.util.SpringUtils;




public class InventaryManager {


/* Inventary - generated by stajanov (do not edit/delete) */



  /** Logger */
  private static final Log log = LogFactory.getLog(InventaryManager.class);

  /** Inventary DAO **/
  private InventaryDAO inventaryDAO;
  
  private InventoryServiceProxy proxy = new InventoryServiceProxyImpl();

  /**
   * Get default InventaryManager as defined in Spring's configuration file.
   * @return the default singleton InventaryManager
   */
  public static InventaryManager getDefault()
  {
    return (InventaryManager)SpringUtils.getSpringBean("managerInventary");
  }

  /** 
   * Empty constructor needed by CGLIB (Spring AOP)
   */
  protected InventaryManager()
  {
  }
	
  /** 
   * Default constructor 
   * @deprecated do not construct managers alone: use Spring's declared beans
   */
  public InventaryManager( InventaryDAO inventaryDAO )
  {
    this.inventaryDAO = inventaryDAO;
  }

  /**
   * List inventarys. 
   * @param search search filter to apply
   * @param sort sorting criteria
   * @return the list of all inventarys sorted by requested criterion
   */
  public List<Inventary> getAllEntities(InventarySearch search, SortCriteria sort){
	  log.info("inventory getAllEntities ");
    //return inventaryDAO.search( search, sort );
    //return proxy.getAllEntities(search, sort);
    
    List<Inventary> inventaryList =  proxy.getAllEntities(search, sort);
	  log.info("In InventoryManager getAllEntities --"+ inventaryList.size());
	  if(inventaryList!=null && inventaryList.size()>0) {
		  Inventary inventary = inventaryList.get(0);
		  log.info("In InventoryManager  getAllEntitiesid before returning --"+ inventary.getId()  +"ownerid--"+ inventary.getOwnerId());
	  } else {
		  log.info("In InventoryManager  getAllEntitiesid before returning -- No Inventories foound");  
	  }
	  return inventaryList;
  }
  
  /**
   * Get inventary by primary key.
   * @return inventary selected by id.
   */
  public Inventary getEntityById(int id){
    //return inventaryDAO.getById(id);
	  log.info("InventaryManage insertEntity");
    return (Inventary) proxy.getById(id);
    
  }
	
  /**
   * Insert inventary. 
   */
  public void insertEntity(Inventary inventary) {
    //inventaryDAO.insert(inventary);
	  log.info("InventaryManage insertEntity");
    proxy.insertEntity(inventary);
    log.info("InventaryManage insertEntity exit");
  }
	 
  /**
   * Update inventary. 
   */
  public void updateEntity(Inventary inventary) {
    //inventaryDAO.update(inventary);
	  log.info("InventaryManage updateEntity");
    proxy.updateEntity(inventary);
    log.info("InventaryManage updateEntity exit");
  }

  /**
   * Delete inventary. 
   */
  public void deleteEntity(Inventary inventary) {
    //inventaryDAO.delete(inventary);
	  log.info("InventaryManage deleteEntity");
    proxy.deleteEntity(inventary);
    log.info("InventaryManage deleteEntity exit");
  }

/* Inventary - generated by stajanov (do not edit/delete) */

	
}
